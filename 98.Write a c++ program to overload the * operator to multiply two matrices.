#include<iostream>
using namespace std;
class Matrix {
private:
    int rows, cols;
    int** data;
public:
    Matrix(int r, int c) {
        rows = r;
        cols = c;
        data = new int*[rows];
        for (int i = 0; i < rows; i++)
            data[i] = new int[cols];
    }
    ~Matrix() {
        for (int i = 0; i < rows; i++)
            delete[] data[i];
        delete[] data;
    }
    void set(int i, int j, int val) {
        data[i][j] = val;
    }
    Matrix operator*(const Matrix& m) const {
        if (cols!= m.rows) {
            cout << "Matrix multiplication not possible" << endl;
            exit(1);
        }
        Matrix result(rows, m.cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < m.cols; j++) {
                for (int k = 0; k < cols; k++) {
                    result.data[i][j] += data[i][k] * m.data[k][j];
                }
            }
        }
        return result;
    }
    friend ostream& operator<<(ostream& os, const Matrix& m) {
        for (int i = 0; i < m.rows; i++) {
            for (int j = 0; j < m.cols; j++) {
                os << m.data[i][j] << " ";
            }
            os << endl;
        }
        return os;
    }
};
int main() {
    Matrix m1(2, 3);
    m1.set(0, 0, 1); m1.set(0, 1, 2); m1.set(0, 2, 3);
    m1.set(1, 0, 4); m1.set(1, 1, 5); m1.set(1, 2, 6);
    Matrix m2(3, 2);
    m2.set(0, 0, 7); m2.set(0, 1, 8);
    m2.set(1, 0, 9); m2.set(1, 1, 10);
    m2.set(2, 0, 11); m2.set(2, 1, 12);
    Matrix m3 = m1 * m2;
    cout << "Matrix 1:" << endl << m1 << endl;
    cout << "Matrix 2:" << endl << m2 << endl;
    cout << "Matrix 1 * Matrix 2:" << endl << m3 << endl;

    return 0;
}
